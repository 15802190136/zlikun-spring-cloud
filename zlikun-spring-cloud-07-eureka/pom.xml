<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>zlikun-spring-cloud</artifactId>
        <groupId>com.zlikun.spring</groupId>
        <version>1.0.0</version>
    </parent>

    <artifactId>zlikun-spring-cloud-07-eureka</artifactId>

    <properties>
        <docker.repostory>registry.cn-hangzhou.aliyuncs.com</docker.repostory>
        <docker.registry.name>zlikun</docker.registry.name>
    </properties>

    <dependencies>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-eureka-server</artifactId>
        </dependency>

    </dependencies>

    <build>
        <finalName>eureka</finalName>
        <resources><!-- 使用@@站位符，输出Dockerfile至docker文件夹 -->
            <resource>
                <directory>src/main/docker</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/Dockerfile</include>
                </includes>
                <targetPath>../docker</targetPath>
            </resource>
        </resources>
        <plugins>
            <!-- https://github.com/spotify/docker-maven-plugin -->
            <!-- http://www.jianshu.com/p/c435ea4c0cc0 -->
            <!-- mvn clean package docker:build -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.0.0</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>tag-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>tag</goal>
                        </goals>
                        <configuration>
                            <image>${docker.registry.name}/${project.artifactId}:${project.version}</image>
                            <newName>
                                ${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}
                            </newName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>push-image</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>push</goal>
                        </goals>
                        <configuration>
                            <imageName>
                                ${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}
                            </imageName>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <!-- 私有仓库配置，需要settings.xml文件配合serverId对应的服务地址 -->
                    <serverId>docker-aliyun</serverId>
                    <registryUrl>registry.cn-hangzhou.aliyuncs.com</registryUrl>
                    <!-- <forceTags>true</forceTags> -->
                    <!--install阶段也上传，否则只有deploy阶段上传-->
                    <pushImage>true</pushImage>
                    <dockerDirectory>target/docker</dockerDirectory>
                    <imageName>
                        ${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}
                    </imageName>
                    <imageTags>
                        <imageTag>${project.version}</imageTag>
                        <imageTag>latest</imageTag>
                    </imageTags>
                    <resources>
                        <rescource><!-- 将打包文件放入dockerDirectory指定的位置 -->
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </rescource>
                        <!-- 输出Dockerfile至docker文件夹,如果不使用占位符,可使用以下配置 -->
                        <!--
                        <resource>
                            <directory>src/main/docker</directory>
                            <filtering>true</filtering>
                            <includes>
                                <include>**/Dockerfile</include>
                            </includes>
                            <targetPath>../docker</targetPath>
                        </resource>
                        -->
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>